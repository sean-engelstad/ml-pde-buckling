# # 1 - w interior, 2 - w exterior, 3 - nabla^4 w interior
# K11 = tf.constant([[kernel2d(x_train[i,:], x_train[j,:]) for i in range(num_interior)] for j in range(num_interior)], dtype=DTYPE)
# K21 = tf.constant([[kernel2d(x_train[i,:], x_bndry[j,:]) for i in range(num_interior)] for j in range(num_bndry)], dtype=DTYPE)
# # print(f"{K21.shape=}")
# K22 = tf.constant([[kernel2d(x_bndry[i,:], x_bndry[j,:]) for i in range(num_bndry)] for j in range(num_bndry)], dtype=DTYPE)
# _temp1 = np.array([[kernel2d_bilapl(x_train[i,:], x_train[j,:]) for i in range(num_interior)] for j in range(num_interior)])
# K31 = tf.constant(_temp1, dtype=DTYPE)
# _temp2 = np.array([[kernel2d_bilapl(x_bndry[i,:], x_train[j,:]) for i in range(num_bndry)] for j in range(num_interior)])
# K32 = tf.constant(_temp2, dtype=DTYPE)
# # print(f"{K32.shape=}")
# _temp3 = np.array([[kernel2d_double_bilapl(x_train[i,:], x_train[j,:]) for i in range(num_interior)] for j in range(num_interior)])
# K33 = tf.constant(_temp3, dtype=DTYPE)
# # _step1 = tf.concat([K11, K21.T, K31.T], axis=1)
# _row1 = tf.concat([K11, tf.transpose(K21), tf.transpose(K31)], axis=1)
# _row2 = tf.concat([K21, K22, tf.transpose(K32)], axis=1)
# _row3 = tf.concat([K31, K32, K33], axis=1)
# # adaptive nugget term added here
# Kblock = tf.constant(tf.concat([_row1, _row2, _row3], axis=0) + tf.eye(n_block) * sigma_eye, dtype=DTYPE)
# # print(f"{Kblock=}")